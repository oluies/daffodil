<schema xmlns="http://www.w3.org/2001/XMLSchema" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns:tns="http://www.example.org/example1/" 
	xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" 
	targetNamespace="http://www.example.org/example1/">

  <!-- Parsing CSV as matrix, then transposing.
       Uses hidden layers, inputValueCalc,
       evaluated OccursCount, and variables -->

  <!-- Against the DFDL specification, this example
       allows reassignment of variables -->

  <annotation>
    <appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:defineVariable name="i" type="xsd:int" defaultValue="0"/>
    </appinfo>
  </annotation>

  <group name="originalMatrix">
    <sequence >
      <element name="row" maxOccurs="unbounded">
	<complexType>
	  <sequence>
	    <element name="column" type="xsd:string"
		     dfdl:separator=","
		     dfdl:terminator="%NL;"
		     maxOccurs="unbounded"
		     dfdl:representation="text"/>
	  </sequence>
	</complexType>
      </element>
    </sequence>
  </group>
  
  <element name="transposedMatrix">
    <complexType>
      <sequence>
	<annotation>
	  <appinfo source="http://www.ogf.org/dfdl/">
	    <dfdl:hidden groupref="originalMatrix"/>
	  </appinfo>
	</annotation>
	<element name="transposedRow" 
		 dfdl:occursCountKind="expression"
		 dfdl:occursCount="{ count(../tns:row[1]/tns:column) }">
	  <complexType>
	    <sequence>
	      <element name="transposedColumn"
		       type="xsd:string"
		       dfdl:occursCountKind="expression"
		       dfdl:occursCount="{ count(../../tns:row) }"
		       dfdl:inputValueCalc="{ /tns:transposedMatrix/tns:row[count(/tns:transposedMatrix/tns:transposedRow[$i]/tns:transposedColumn)]/tns:column[$i] }">
		<annotation>
		  <appinfo source="http://www.ogf.org/dfdl/">
		    <!-- Notice that transposedColumn is an array. The variable assigment will be performed
			 once per array instance, NOT once per element instance -->
		    <dfdl:setVariable ref="i">{ $i + 1 }</dfdl:setVariable>
		  </appinfo>
		</annotation>
	      </element>
	    </sequence>
	  </complexType>
	</element>
      </sequence>
    </complexType>
  </element>
</schema>
